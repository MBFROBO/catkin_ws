;; Auto-generated. Do not edit!


(when (boundp 'audio_file_player::AudioFilePlayResult)
  (if (not (find-package "AUDIO_FILE_PLAYER"))
    (make-package "AUDIO_FILE_PLAYER"))
  (shadow 'AudioFilePlayResult (find-package "AUDIO_FILE_PLAYER")))
(unless (find-package "AUDIO_FILE_PLAYER::AUDIOFILEPLAYRESULT")
  (make-package "AUDIO_FILE_PLAYER::AUDIOFILEPLAYRESULT"))

(in-package "ROS")
;;//! \htmlinclude AudioFilePlayResult.msg.html


(defclass audio_file_player::AudioFilePlayResult
  :super ros::object
  :slots (_success _reason _total_time ))

(defmethod audio_file_player::AudioFilePlayResult
  (:init
   (&key
    ((:success __success) nil)
    ((:reason __reason) "")
    ((:total_time __total_time) (instance ros::time :init))
    )
   (send-super :init)
   (setq _success __success)
   (setq _reason (string __reason))
   (setq _total_time __total_time)
   self)
  (:success
   (&optional (__success :null))
   (if (not (eq __success :null)) (setq _success __success)) _success)
  (:reason
   (&optional __reason)
   (if __reason (setq _reason __reason)) _reason)
  (:total_time
   (&optional __total_time)
   (if __total_time (setq _total_time __total_time)) _total_time)
  (:serialization-length
   ()
   (+
    ;; bool _success
    1
    ;; string _reason
    4 (length _reason)
    ;; time _total_time
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _success
       (if _success (write-byte -1 s) (write-byte 0 s))
     ;; string _reason
       (write-long (length _reason) s) (princ _reason s)
     ;; time _total_time
       (write-long (send _total_time :sec) s) (write-long (send _total_time :nsec) s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _success
     (setq _success (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; string _reason
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _reason (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; time _total_time
     (send _total_time :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _total_time :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get audio_file_player::AudioFilePlayResult :md5sum-) "63da86c1ec3bfb8b78f7e875747b385b")
(setf (get audio_file_player::AudioFilePlayResult :datatype-) "audio_file_player/AudioFilePlayResult")
(setf (get audio_file_player::AudioFilePlayResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result information
# If it was successful
bool success
# If it wasn't reason why it wasn't
string reason
# Total time the file was playing
time total_time

")



(provide :audio_file_player/AudioFilePlayResult "63da86c1ec3bfb8b78f7e875747b385b")


